# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++

on: workflow_dispatch

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ARCHERY_DEBUG: 1
  ARROW_ENABLE_TIMING_TESTS: OFF
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:
  macos:
    name: ${{ matrix.architecture }} macOS ${{ matrix.macos-version }} C++
    runs-on: macos-${{ matrix.macos-version }}
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - architecture: ARM64
            macos-version: "14"
    env:
      ARROW_AZURE: ON
      ARROW_BUILD_TESTS: ON
      ARROW_DATASET: ON
      ARROW_FLIGHT: ON
      ARROW_GANDIVA: ON
      ARROW_GCS: ON
      ARROW_HDFS: ON
      ARROW_HOME: /tmp/local
      ARROW_JEMALLOC: ON
      ARROW_ORC: ON
      ARROW_PARQUET: ON
      ARROW_S3: ON
      ARROW_SUBSTRAIT: ON
      ARROW_WITH_BROTLI: ON
      ARROW_WITH_BZ2: ON
      ARROW_WITH_LZ4: ON
      # GH-36013 disabling opentelemetry here because we can't
      # get the patched version from conda
      # ARROW_WITH_OPENTELEMETRY: ON
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_ZSTD: ON
      GTest_SOURCE: BUNDLED
    steps:
      - name: CPU Info
        run: |
          sysctl -a | grep cpu
          sysctl -a | grep "hw.optional"
      - name: Checkout Arrow
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install Dependencies
        run: |
          brew bundle --file=cpp/Brewfile
      - name: Install MinIO
        run: |
          $(brew --prefix bash)/bin/bash \
            ci/scripts/install_minio.sh latest ${ARROW_HOME}
          echo "${ARROW_HOME}/bin" >> $GITHUB_PATH
      - name: Set up Python
        uses: actions/setup-python@v5.2.0
        with:
          python-version: 3.12
      - name: Install Google Cloud Storage Testbench
        run: ci/scripts/install_gcs_testbench.sh default
      - name: Install Azurite Storage Emulator
        run: ci/scripts/install_azurite.sh
      - name: Setup ccache
        run: |
          ci/scripts/ccache_setup.sh
      - name: ccache info
        id: ccache-info
        run: |
          echo "cache-dir=$(ccache --get-config cache_dir)" >> $GITHUB_OUTPUT
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ steps.ccache-info.outputs.cache-dir }}
          key: cpp-ccache-macos-${{ matrix.macos-version }}-${{ hashFiles('cpp/**') }}
          restore-keys: cpp-ccache-macos-${{ matrix.macos-version }}-
      - name: Build
        run: |
          ci/scripts/cpp_build.sh $(pwd) $(pwd)/build
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
      - name: Test
        shell: bash
        run: |
          sudo sysctl -w kern.coredump=1
          sudo sysctl -w kern.corefile=/tmp/core.%N.%P
          ulimit -c unlimited  # must enable within the same shell
          ci/scripts/cpp_test.sh $(pwd) $(pwd)/build
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: logs
          path: /Users/runner/work/arrow/arrow/build/cpp/build/test-logs/
